{
  "name": "defend&Debug",
  "id": "a238fe93-ae9e-4e7c-83a6-54f9b9575437",
  "type": "supervisedParallel",
  "subtrees": [
    {
      "name": "<unnamed>",
      "id": "a75d632d-c67f-4460-93ce-3fce3be5cd98",
      "type": "sequence",
      "subtrees": [
        {
          "name": "makeArea",
          "id": "b85d5c88-5507-4076-997f-416fb7c8360f",
          "type": "scriptAction",
          "script": [
            "local angle = arg.orderData.azimut",
            "local alpha = Vec3(10,0,0):RotatedAroundZ(angle)",
            "local beta = Vec3(0,10,0):RotatedAroundZ(angle)",
            "",
            "local rectanglepoints = {",
            "    arg.orderData.position + alpha + beta, -- pos1",
            "    arg.orderData.position + alpha - beta, -- pos2",
            "    arg.orderData.position - alpha - beta, -- pos3",
            "    arg.orderData.position - alpha + beta, -- pos4",
            "}",
            "",
            "loc.searchArea = rectanglepoints"
          ]
        },
        {
          "name": "proper cover search",
          "id": "6a9a606f-34d1-4343-a957-3f60a82accdb",
          "type": "sequence",
          "subtrees": [
            {
              "name": "proper find cover",
              "id": "36bd1ee2-834a-46e9-b516-2677fd08d659",
              "type": "scriptAction",
              "script": [
                "loc.covers = {}",
                "",
                "local listOfChildElements = orbat.GetChildElements()",
                "local positionsOfSoldiers = {}",
                "",
                "for i=1, #listOfChildElements do",
                "    -- positionsOfSoldiers[i] = self:GetEntity(i-1):GetPosition() -- Saving soldier positions",
                "    positionsOfSoldiers[i] = arg.orderData.position + Vec3(math.random(-5,5), math.random(-5,5), 0)",
                "end",
                "",
                "local params = {",
                "    --[[weights = { ",
                "        distance = -0.0001, ",
                "        protection = 1, ",
                "        preferenceTowardThreats = -0.1,",
                "        lineOfFire = 0",
                "    }, ",
                "    constraints = {",
                "        coneOfFire = 15 ",
                "    }]]--",
                "}",
                "",
                "loc.coverQueryRequest = FindCovers(",
                "    {}, -- threats",
                "    Polygon(loc.searchArea), -- searchArea",
                "    positionsOfSoldiers, -- current positions of soldiers",
                "    params -- defined above",
                ")"
              ]
            },
            {
              "name": "Wait until cover ready",
              "id": "cc52e1a2-4f00-4ca4-8bdc-504f71750a52",
              "type": "waitUntil",
              "condition": [
                "local isReady = loc.coverQueryRequest:IsReady()",
                "",
                "if isReady then ",
                "    loc.coverQueryResult = loc.coverQueryRequest:Value()",
                "    for i=1, #loc.coverQueryResult do",
                "        loc.covers[i] = loc.coverQueryResult[i].position",
                "    end",
                "    return true",
                "end",
                "return false "
              ]
            }
          ]
        },
        {
          "name": "MSG: NewOrder to soldiers",
          "id": "e7b8696a-b77c-4a58-981b-a1fa33d83f8b",
          "type": "scriptAction",
          "script": [
            "--loc.childElementsInPositions = InternalTable()",
            "local listOfChildElements = orbat.GetChildElements()",
            "--local pointman = listOfChildElements[1]",
            "",
            "-- local newOrder = team.Reorder(listOfChildElements, pointman)",
            "",
            "",
            "for i=1, #listOfChildElements do",
            "    local soldier = listOfChildElements[i]",
            "    self:SendMessage(",
            "        soldier, -- receiver",
            "        \"NewOrder\", -- behaviorName",
            "        { ",
            "            orderName = \"move\",",
            "            position = loc.covers[i],",
            "            parentOrderData = arg.orderData -- copy of current level orderData",
            "        }",
            "    )",
            "end"
          ]
        },
        {
          "name": "MSG: OrderCompleted",
          "id": "85f58436-7d62-4aa5-a2f9-12194a34b458",
          "type": "scriptAction",
          "script": [
            "self:SendMessage(",
            "    self:GetParentGroup(),",
            "    \"OrderCompleted\",",
            "    {}",
            ")",
            "self:SendMessage(",
            "    Message.External,",
            "    \"OrderCompleted\",",
            "    {}",
            ")"
          ]
        },
        {
          "name": "Wait Forever",
          "id": "7a415bab-3978-4723-893d-328dc3ac4c00",
          "type": "waitForever"
        }
      ]
    },
    {
      "name": "debug",
      "id": "61429780-e81b-4fbf-8706-be52376dadbc",
      "type": "scriptAction",
      "script": [
        "if arg.orderData.debugEnabled then",
        "    ",
        "    -- draw line of the position",
        "    local vector = MathExt.HeadingToVec3(arg.orderData.azimut)",
        "    DebugLine(",
        "        arg.orderData.position + Vec3(0,0,4), -- pos1",
        "        arg.orderData.position + Vec3(0,0,4) + 4*vector, -- pos2",
        "        0.8, 0.3, 0.7 -- colors",
        "    )",
        "    ",
        "    -- draw line of the direction",
        "    DebugLine(",
        "        arg.orderData.position, -- pos1",
        "        arg.orderData.position + Vec3(0,0,4), -- pos2",
        "        0.8, 0.3, 0.7 -- colors",
        "    )",
        "",
        "    -- once area calculated, draw all points of the area",
        "    if loc.searchArea then",
        "        draw.PolygonOnSurface(",
        "            loc.searchArea,",
        "            0.8, 0.3, 0.7, 1, -- colors",
        "            Vec3(0,0,1)",
        "        )",
        "    end",
        "",
        "    -- if covers calculated, draw line for each of them",
        "    if loc.covers ~= nil then ",
        "        for i=1, #loc.covers do",
        "            DebugLine(",
        "               loc.covers[i], -- pos1",
        "               loc.covers[i] + Vec3(0,0,4), -- pos2",
        "                0, 1, 0 -- colors",
        "            )",
        "          ",
        "        end",
        "    end",
        "end"
      ]
    }
  ],
  "unlinked-trees": [
    {
      "name": "random find cover",
      "id": "93043089-2103-44cd-b966-054b441e86dc",
      "type": "scriptAction",
      "meta": {
        "nodesInfo": [
          {
            "id": "93043089-2103-44cd-b966-054b441e86dc",
            "position": "1337.5,738.5"
          }
        ],
        "editorObjects": []
      },
      "script": [
        "loc.covers = {}",
        "local listOfChildElements = orbat.GetChildElements()",
        "for i=1, #listOfChildElements do",
        "  loc.covers[i] = arg.orderData.position + Vec3(math.random(-5,5), math.random(-5,5), 0)",
        "end"
      ]
    }
  ],
  "meta": {
    "nodesInfo": [
      {
        "id": "a238fe93-ae9e-4e7c-83a6-54f9b9575437",
        "position": "1962.5,151"
      },
      {
        "id": "e857997b-3028-48b9-924b-b3f7076cde7b",
        "position": "1312.5,362.388888888889"
      },
      {
        "id": "3c9618a6-c696-4337-80c0-75d305bbda45",
        "position": "1312.5,701"
      },
      {
        "id": "e3ea81fe-0c19-43da-bf02-98a074e617ed",
        "position": "2000,463.5"
      },
      {
        "id": "a75d632d-c67f-4460-93ce-3fce3be5cd98",
        "position": "1787.5,351"
      },
      {
        "id": "b85d5c88-5507-4076-997f-416fb7c8360f",
        "position": "1112.5,488.5"
      },
      {
        "id": "6a9a606f-34d1-4343-a957-3f60a82accdb",
        "position": "1412.5,488.5"
      },
      {
        "id": "36bd1ee2-834a-46e9-b516-2677fd08d659",
        "position": "1337.5,613.5"
      },
      {
        "id": "cc52e1a2-4f00-4ca4-8bdc-504f71750a52",
        "position": "1525,613.5"
      },
      {
        "id": "e7b8696a-b77c-4a58-981b-a1fa33d83f8b",
        "position": "1737.5,488.5"
      },
      {
        "id": "85f58436-7d62-4aa5-a2f9-12194a34b458",
        "position": "2012.5,501"
      },
      {
        "id": "7a415bab-3978-4723-893d-328dc3ac4c00",
        "position": "2250,488.5"
      },
      {
        "id": "61429780-e81b-4fbf-8706-be52376dadbc",
        "position": "2325,351"
      }
    ],
    "editorObjects": [
      {
        "id": "e857997b-3028-48b9-924b-b3f7076cde7b",
        "type": "comment",
        "header": "search for covers using FindCovers",
        "body": "",
        "bodyAlignment": "Left",
        "width": 395.888888888889,
        "height": 333.99999999999989,
        "headerBackground": "#FF00FF00",
        "headerForeground": "#FF000000",
        "boxBackground": "#FF90EE90",
        "boxForeground": "#FF000000"
      },
      {
        "id": "3c9618a6-c696-4337-80c0-75d305bbda45",
        "type": "comment",
        "header": "random positions",
        "body": "",
        "bodyAlignment": "Left",
        "width": 395.888888888889,
        "height": 155.11111111111109,
        "headerBackground": "#FF00FF00",
        "headerForeground": "#FF000000",
        "boxBackground": "#FF90EE90",
        "boxForeground": "#FF000000"
      },
      {
        "id": "e3ea81fe-0c19-43da-bf02-98a074e617ed",
        "type": "comment",
        "header": "Parent group & External",
        "body": "",
        "bodyAlignment": "Left",
        "width": 199.0,
        "height": 102.0,
        "headerBackground": "#FFB26B00",
        "headerForeground": "#FFFFFFFF",
        "boxBackground": "#FF99FF00",
        "boxForeground": "#FF000000"
      }
    ],
    "canvasSize": "3840,2576",
    "gridPadding": "0,1"
  },
  "parameters": [
    {
      "name": "orderData",
      "isOptional": false,
      "defaultValue": ""
    }
  ],
  "locals": {
    "covers": "return nil",
    "searchArea": "return nil",
    "coverQueryRequest": "return nil",
    "coverQueryResult": "return nil"
  }
}