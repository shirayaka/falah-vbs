{
  "name": "defend&Debug",
  "id": "a238fe93-ae9e-4e7c-83a6-54f9b9575437",
  "type": "supervisedParallel",
  "subtrees": [
    {
      "name": "<unnamed>",
      "id": "a75d632d-c67f-4460-93ce-3fce3be5cd98",
      "type": "sequence",
      "subtrees": [
        {
          "name": "find cover",
          "id": "36bd1ee2-834a-46e9-b516-2677fd08d659",
          "type": "scriptAction",
          "script": [
            "loc.covers = {}",
            "local listOfChildElements = orbat.GetChildElements()",
            "for i=1, #listOfChildElements do",
            "  loc.covers[i] = arg.orderData.position + Vec3(math.random(-5,5), math.random(-5,5), 0)",
            "end"
          ]
        },
        {
          "name": "MSG: NewOrder to soldiers",
          "id": "e7b8696a-b77c-4a58-981b-a1fa33d83f8b",
          "type": "scriptAction",
          "script": [
            "--loc.childElementsInPositions = InternalTable()",
            "local listOfChildElements = orbat.GetChildElements()",
            "--local pointman = listOfChildElements[1]",
            "",
            "-- local newOrder = team.Reorder(listOfChildElements, pointman)",
            "",
            "",
            "for i=1, #listOfChildElements do",
            "    local soldier = listOfChildElements[i]",
            "    self:SendMessage(",
            "        soldier, -- receiver",
            "        \"NewOrder\", -- behaviorName",
            "        { ",
            "            orderName = \"move\",",
            "            position = loc.covers[i],",
            "            parentOrderData = arg.orderData -- copy of current level orderData",
            "        }",
            "    )",
            "end"
          ]
        },
        {
          "name": "Wait Forever",
          "id": "7a415bab-3978-4723-893d-328dc3ac4c00",
          "type": "waitForever"
        }
      ]
    },
    {
      "name": "debug",
      "id": "61429780-e81b-4fbf-8706-be52376dadbc",
      "type": "scriptAction",
      "script": [
        "if arg.orderData.debugEnabled then",
        "    local vector = MathExt.HeadingToVec3(arg.orderData.azimut)",
        "    DebugLine(",
        "        arg.orderData.position + Vec3(0,0,4), -- pos1",
        "        arg.orderData.position + Vec3(0,0,4) + 4*vector, -- pos2",
        "        0.8, 0.3, 0.7 -- colors",
        "    )",
        "    DebugLine(",
        "        arg.orderData.position, -- pos1",
        "        arg.orderData.position + Vec3(0,0,4), -- pos2",
        "        0.8, 0.3, 0.7 -- colors",
        "    )",
        "    if loc.covers ~= nil then ",
        "        local listOfChildElements = orbat.GetChildElements()",
        "        for i=1, #listOfChildElements do",
        "            DebugLine(",
        "                loc.covers[i], -- pos1",
        "               loc.covers[i] + Vec3(0,0,4), -- pos2",
        "                0, 1, 0 -- colors",
        "            )",
        "          ",
        "        end",
        "    end",
        "end"
      ]
    }
  ],
  "meta": {
    "nodesInfo": [
      {
        "id": "a238fe93-ae9e-4e7c-83a6-54f9b9575437",
        "position": "2000,226"
      },
      {
        "id": "a75d632d-c67f-4460-93ce-3fce3be5cd98",
        "position": "1900,326"
      },
      {
        "id": "36bd1ee2-834a-46e9-b516-2677fd08d659",
        "position": "1550,438.5"
      },
      {
        "id": "e7b8696a-b77c-4a58-981b-a1fa33d83f8b",
        "position": "1737.5,438.5"
      },
      {
        "id": "7a415bab-3978-4723-893d-328dc3ac4c00",
        "position": "1987.5,438.5"
      },
      {
        "id": "61429780-e81b-4fbf-8706-be52376dadbc",
        "position": "2137.5,376"
      }
    ],
    "editorObjects": [],
    "canvasSize": "3840,2526",
    "gridPadding": "0,1"
  },
  "parameters": [
    {
      "name": "orderData",
      "isOptional": false,
      "defaultValue": ""
    }
  ],
  "locals": {
    "covers": "return nil"
  }
}